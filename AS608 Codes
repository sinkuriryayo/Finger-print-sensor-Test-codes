#include <WiFi.h>
#include <WebServer.h>
#include <Adafruit_Fingerprint.h>
#include <HardwareSerial.h>

// === Fingerprint Setup ===
HardwareSerial mySerial(2);  // GPIO 16 = RX, 17 = TX
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// === Wi-Fi AP Settings ===
const char* ssid = "Smart-Fingerprint";
const char* password = "12345678";

// === Web Server ===
WebServer server(80);

// === Forward Declarations ===
void handleRoot();
void handleStatus();
void handleForm();
void handleUsers();
void scanAndEnrollOnce();

// === Global State ===
bool sensorReady = false;
String fingerStatus = "üî¥ No finger on sensor.";
bool fingerCaptured = false;
bool fingerStillOn = false;
int enrollID = 1;

// === User Struct ===
struct User {
  int id;
  String name;
  String age;
  String residence;
};
User users[50];
int userCount = 0;

void setup() {
  Serial.begin(115200);
  delay(1000);

  mySerial.begin(57600, SERIAL_8N1, 16, 17);
  finger.begin(57600);
  delay(500);

  if (finger.verifyPassword()) {
    sensorReady = true;
    Serial.println("‚úÖ AS608 sensor ready.");
  } else {
    sensorReady = false;
    Serial.println("‚ùå AS608 not detected. Check wiring!");
  }

  WiFi.softAP(ssid, password);
  Serial.println("ESP32 AP IP: " + WiFi.softAPIP().toString());

  server.on("/", handleRoot);
  server.on("/status", handleStatus);
  server.on("/submit", HTTP_POST, handleForm);
  server.on("/users", handleUsers);
  server.begin();
  Serial.println("‚úÖ Web server started.");
}

void loop() {
  server.handleClient();
  if (sensorReady) scanAndEnrollOnce();

  // Debug: show loop is running every second
  static unsigned long lastLog = 0;
  if (millis() - lastLog > 1000) {
    Serial.println("Loop running...");
    lastLog = millis();
  }
}

// === Fingerprint Scan + Timing Strategy ===
void scanAndEnrollOnce() {
  int result = finger.getImage();

  if (result == FINGERPRINT_OK && !fingerStillOn) {
    Serial.println("üü¢ Finger detected.");
    fingerStillOn = true;
    delay(300);  // Let sensor settle

    int conv1 = finger.image2Tz(1);
    if (conv1 != FINGERPRINT_OK) {
      Serial.println("‚ö†Ô∏è image2Tz(1) failed: " + String(conv1));
      fingerStatus = "‚ö†Ô∏è First image conversion failed.";
      return;
    }

    fingerStatus = "üì∏ First image captured. Lift and replace finger...";
    Serial.println(fingerStatus);

    // Wait for finger to be removed
    while (finger.getImage() != FINGERPRINT_NOFINGER);
    Serial.println("üü° Finger lifted. Waiting for second scan...");

    // Now wait for second placement
    while (finger.getImage() != FINGERPRINT_OK);
    Serial.println("üü¢ Second placement detected.");
    delay(300);

    int conv2 = finger.image2Tz(2);
    if (conv2 != FINGERPRINT_OK) {
      Serial.println("‚ö†Ô∏è image2Tz(2) failed: " + String(conv2));
      fingerStatus = "‚ö†Ô∏è Second image conversion failed.";
      return;
    }

    if (finger.createModel() != FINGERPRINT_OK) {
      Serial.println("‚ö†Ô∏è Model creation failed.");
      fingerStatus = "‚ö†Ô∏è Failed to create fingerprint model.";
      return;
    }

    if (finger.storeModel(enrollID) == FINGERPRINT_OK) {
      Serial.println("‚úÖ Fingerprint stored at ID: " + String(enrollID));
      fingerStatus = "üü¢ Stored fingerprint ID " + String(enrollID) + ". Fill the form.";
      fingerCaptured = true;
    } else {
      fingerStatus = "‚ùå Failed to store fingerprint.";
    }
  }

  else if (result == FINGERPRINT_NOFINGER) {
    if (fingerStillOn) {
      Serial.println("üü° Finger removed.");
      fingerStillOn = false;
      fingerStatus = "üî¥ Waiting for finger...";
    }
  }

  else if (result != FINGERPRINT_NOFINGER) {
    Serial.println("‚ö†Ô∏è getImage error: " + String(result));
    fingerStatus = "‚ö†Ô∏è Image capture error: " + String(result);
  }
}

// === HTML Page ===
void handleRoot() {
  String html = R"rawliteral(
    <!DOCTYPE html>
    <html>
    <head>
      <title>Fingerprint Register</title>
      <style>
        body { font-family: Arial; text-align: center; padding-top: 40px; }
        input, button { padding: 10px; margin: 8px; width: 250px; font-size: 16px; }
        .status { font-size: 20px; margin-top: 20px; }
      </style>
    </head>
    <body>
      <h2>Fingerprint Enroll System</h2>
      <div class="status" id="status">Checking...</div>
      <form action="/submit" method="POST">
        <input name="name" placeholder="Full Name" required><br>
        <input name="age" placeholder="Age" required><br>
        <input name="residence" placeholder="Residence" required><br>
        <button type="submit">Submit Info</button>
      </form>
      <script>
        async function updateStatus() {
          const res = await fetch('/status');
          document.getElementById('status').innerText = await res.text();
        }
        setInterval(updateStatus, 1000);
        updateStatus();
      </script>
      <hr>
      <a href="/users" target="_blank">üìã View Enrolled Users</a>
    </body>
    </html>
  )rawliteral";

  server.send(200, "text/html", html);
}

// === Finger Status to Web UI ===
void handleStatus() {
  server.send(200, "text/plain", fingerStatus);
}

// === Submit User Info ===
void handleForm() {
  if (!fingerCaptured) {
    server.send(200, "text/plain", "‚ö†Ô∏è No fingerprint stored yet.");
    return;
  }

  String name = server.arg("name");
  String age = server.arg("age");
  String residence = server.arg("residence");

  users[userCount++] = {enrollID, name, age, residence};
  Serial.println("üìã User saved: " + name);

  enrollID++;
  fingerCaptured = false;

  String html = "<html><body><h3>‚úÖ Info saved successfully!</h3><a href='/'>‚¨ÖÔ∏è Back to Main Page</a></body></html>";
  server.send(200, "text/html", html);
}

// === View All Users ===
void handleUsers() {
  String html = "<html><body><h2>Registered Users</h2><table border='1' cellpadding='6'><tr><th>ID</th><th>Name</th><th>Age</th><th>Residence</th></tr>";
  for (int i = 0; i < userCount; i++) {
    html += "<tr><td>" + String(users[i].id) + "</td><td>" + users[i].name + "</td><td>" + users[i].age + "</td><td>" + users[i].residence + "</td></tr>";
  }
  html += "</table></body></html>";
  server.send(200, "text/html", html);
}
